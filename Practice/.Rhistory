install.packages("rlang")
uninstall.packages("rlang")
print("Hello World!")
library(factoextra)
library(tidyverse)
library(cluster)
library(factoextra)
df <- USArrests
df <- na.omit(df)
df
df <- scale
df <- USArrests
df <- na.omit(df)
df <- scale(df)
head(df)
install.packages("factoextra")
#install.packages("FactoMineR")
#install.packages("factoextra")
library(FactoMineR)
library(factoextra)
#install.packages("FactoMineR")
#install.packages("factoextra")
library(FactoMineR)
library(factoextra)
distance <- get_dist(df)
fviz_dist(distance, gradient = list(low = "#00AFBB",mid = white,
high = "#FC4E07"))
fviz_dist(distance, gradient = list(low = "#00AFBB",mid = "white",
high = "#FC4E07"))
k1 <- kmeans(df, centers = 3, nnstart = 25)
k1 <- kmeans(df, centers = 3, nstart = 25)
str(k1)
k1
fviz_cluster(k1, data = df)
# Extract wss for 2 - 15 clusters
wss_values <- map_dbl(k.values, wss)
k3 <- kmeans(df, centers = 3, nstart = 25)
str(k3)
k3
fviz_cluster(k3, data = df)
# Intra-cluster variation (Known as total within-cluster variation/total
# within-cluster sum of square)
# Implementation of Elbow method in R
set.seed(123)
#Function to compute total within-cluster sum of square
wss <- function(k){
kmeans(df, k, nstart = 10)$tot.withinss
}
# compute and plot wss for k = 1 to k = 10
k.values <- 1:10
# Extract wss for 2 - 15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values, type = "b",
pch = 19, frame = F, xlab = "Number of clusters K",
ylab = "Total within-clusters sum of squares")
fviz.nbclust(df, kmeans, method = "wss")
fviz_nbclust(df, kmeans, method = "wss")
# Optimal number of clusters = 4, therefore, calc final result using k = 4
set.seed(123)
final <- kmeans(df, 4, nstart = 25)
print(final)
fviz_cluster(final, data = df)
library("Metris")
library("DAAG")
library(lattice)
library("DAAG")
lm
setwd("E:/College/CL7/Practice/")
data <- read.csv2("bank-full.csv", header = T)
view(data)
data
head(data)
dim(data)
data <- read.csv("bank-full.csv", header = T)
head(data)
dim(data)
clean_data <- data
outliers <- boxplot(data$age)$out
clean_data<- clean_data[-which(clean_data$age %in% outliers)]
dim(clean_data)
boxplot(clean_data$age)
clean_data <- data
outliers <- boxplot(data$age)$out
data <- read.csv("bank-full.csv", header = T)
outliers <- boxplot(data$age)$out
clean_data<- clean_data[-which(clean_data$age %in% outliers)]
dim(clean_data)
boxplot(clean_data$age)
quant = quantile(data$age, c(0.99))
quant = quantile(data$age, c(0.95))
quant = quantile(data$age, c(0.99))
clean_data$age[clean_data$age > quant] <- quant
boxplot(clean_data$age)
quant = quantile(data$age, c(0.9))
quant = quantile(data$age, c(0.989))
clean_data$age[clean_data$age > quant] <- quant
boxplot(clean_data$age)
library(leaps)
setwd("E:/College/CL7/Practice/")
data <- read.csv("bank-full.csv", header = T)
head(data)
dim(data)
clean_data <- data
# Observe data
head(data)
dim(data)
# Taking 98.9 percentile of age
countplot(clean_data$age)
library(ggplot2)
ggplot(clean_data, fill = age)
summary(clean_data)
# y is the final outcome, so we will use label encoding
clean_data$y <- ifelse(clean_data$y == "yes", 1, 0)
clean_data
# similarly for housing
clean_data$housing <- ifelse(clean_data$housing == "yes", 1, 0)
clean_data$default <- ifelse(clean_data$default == "yes", 1, 0)
# Checking balance (outliers)
boxplot(data$balance)
quantbl <- quantile(data$balance, c(0.99))
clean_data$balance[clean_data$balance > quant] <- quant
# https://www.pluralsight.com/guides/encoding-data-with-r
# Importing libraries
library("Metrics")
# https://www.pluralsight.com/guides/encoding-data-with-r
# Importing libraries
library("Metrics")
library(lattice)
library("DAAG")
library(leaps)
library(ggplot2)
# Set working directory and read the data
setwd("E:/College/CL7/Practice/")
data <- read.csv("bank-full.csv", header = T)
# Observe data
head(data)
dim(data)
summary(clean_data)
# Cleaning data
# 1. Removing outliers in age
clean_data <- data
outliers <- boxplot(data$age)$out
# Taking 98.9 percentile of age
countplot(clean_data$age)
quant = quantile(data$age, c(0.989))
clean_data$age[clean_data$age > quant] <- quant
boxplot(clean_data$age)
# Checking balance (outliers)
boxplot(data$balance)
quantbh <- quantile(data$balance, c(0.99))
clean_data$balance[clean_data$balance > quantbh] <- quantbh
quantbl <- quantile(data$balance, c(0.05))
clean_data$balance[clean_data$balance < quantbl] <- quantbl
boxplot(data$balance)
quantbh <- quantile(data$balance, c(0.95))
clean_data$balance[clean_data$balance > quantbh] <- quantbh
quantbl <- quantile(data$balance, c(0.05))
clean_data$balance[clean_data$balance < quantbl] <- quantbl
boxplot(data$balance)
# https://www.pluralsight.com/guides/encoding-data-with-r
# Importing libraries
library("Metrics")
library(lattice)
library("DAAG")
library(leaps)
library(ggplot2)
# Set working directory and read the data
setwd("E:/College/CL7/Practice/")
data <- read.csv("bank-full.csv", header = T)
# Observe data
head(data)
dim(data)
summary(data)
# Cleaning data
# 1. Removing outliers in age
clean_data <- data
outliers <- boxplot(data$age)$out
# Taking 98.9 percentile of age
quant = quantile(data$age, c(0.989))
clean_data$age[clean_data$age > quant] <- quant
boxplot(clean_data$age)
# Need to check in balance
# y is the final outcome, so we will use label encoding
clean_data$y <- ifelse(clean_data$y == "yes", 1, 0)
# similarly for housing and default
clean_data$housing <- ifelse(clean_data$housing == "yes", 1, 0)
clean_data$default <- ifelse(clean_data$default == "yes", 1, 0)
clean_data
summary(clean_data)
summary(clean_data$month)
summary(clean_data$day)
# Cleaning the balance
outliers1 = boxplot(clean_data$balance)$out
quant1 = quantile(data$balance, c(0.95))
clean_data[balance > quant1] <- quant1
clean_data[clean_data$balance > quant1] <- quant1
clean_data$balance[clean_data$balance > quant1] <- quant1
quant2 <- quantile(clean_data$duration, c(0.95))
# cleaning the duration
outliers2 = boxplot(clean_data$duration)$out
clean_data$duration[clean_data$duration > quant2] <- quant2
quant4 = quantile(clean_data, c(0.95))
#Cleaning pdays
outliers4 <- boxplot(clean_data$pdays)$out
quant4 = quantile(clean_data, c(0.95))
#Cleaning pdays
outliers4 <- boxplot(clean_data$pdays)$out
quant4 = quantile(clean_data$pdays, c(0.95))
clean_data$pdays[clean_data$pdays > quant4] <- quant4
# cleaning previous
outliers5 <- boxplot(clean_data$previous)$out
clean_data$previous[clean_data$previous > quant5] <- quant5
# cleaning previous
outliers5 <- boxplot(clean_data$previous)$out
quant5 <- quantile(clean_data$previous, c(0.95))
clean_data$previous[clean_data$previous > quant5] <- quant5
# cleaning previous
outliers5 <- boxplot(clean_data$previous)$out
summary(clean_data)
## Removing NA values
clean_data <- na.exclude(clean_data)
library(mltools)
install.packages(mltools)
install.packages("mltools
")
install.packages("mltools")
library(mltools)
install.packages("data.table")
install.packages("data.table")
#install.packages("data.table")
library(data.table)
# Categorical variables into One Hot encoding
clean_data <- one_hot(as.data.table(clean_data), cols="job", sparsifyNAs=F, naCols=F, dropCols=T, dropUnusedLevels=F)
#install.packages("data.table")
library(data.table)
# Categorical variables into One Hot encoding
clean_data <- one_hot(as.data.table(clean_data), cols="job", sparsifyNAs=F, naCols=F, dropCols=T, dropUnusedLevels=F)
# https://www.pluralsight.com/guides/encoding-data-with-r
# Importing libraries
library("Metrics")
library(lattice)
library("DAAG")
library(leaps)
library(dplyr)
library(tidyr)
library(ggplot2)
# Set working directory and read the data
setwd("E:/College/CL7/Practice/")
data <- read.csv("bank-full.csv", header = T)
# Observe data
head(data)
dim(data)
summary(data)
# Cleaning data
# 1. Removing outliers in age
clean_data <- data
outliers <- boxplot(data$age)$out
# Taking 98.9 percentile of age
quant = quantile(data$age, c(0.989))
clean_data$age[clean_data$age > quant] <- quant
boxplot(clean_data$age)
# Need to check in balance
# y is the final outcome, so we will use label encoding
clean_data$y <- ifelse(clean_data$y == "yes", 1, 0)
# similarly for housing and default
clean_data$housing <- ifelse(clean_data$housing == "yes", 1, 0)
clean_data$default <- ifelse(clean_data$default == "yes", 1, 0)
# Cleaning the balance
outliers1 = boxplot(clean_data$balance)$out
quant1 = quantile(data$balance, c(0.95))
clean_data$balance[clean_data$balance > quant1] <- quant1
# cleaning the duration
outliers2 = boxplot(clean_data$duration)$out
quant2 <- quantile(clean_data$duration, c(0.95))
clean_data$duration[clean_data$duration > quant2] <- quant2
# Cleaning the campaign
outliers3 = boxplot(clean_data$campaign)$out
quant3 <- quantile(clean_data$campaign, c(0.95))
clean_data$campaign[clean_data$campaign > quant3] <- quant3
#Cleaning pdays
outliers4 <- boxplot(clean_data$pdays)$out
quant4 = quantile(clean_data$pdays, c(0.95))
clean_data$pdays[clean_data$pdays > quant4] <- quant4
# cleaning previous
outliers5 <- boxplot(clean_data$previous)$out
quant5 <- quantile(clean_data$previous, c(0.95))
clean_data$previous[clean_data$previous > quant5] <- quant5
summary(clean_data)
## Removing NA values
clean_data <- na.exclude(clean_data)
#install.packages("mltools")
library(mltools)
#install.packages("data.table")
library(data.table)
# Categorical variables into One Hot encoding
clean_data <- one_hot(as.data.table(clean_data), cols="job", sparsifyNAs=F, naCols=F, dropCols=T, dropUnusedLevels=F)
